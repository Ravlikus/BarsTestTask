//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContractsForm.ContractsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contract", Namespace="http://schemas.datacontract.org/2004/07/ContractReader", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Contract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ContractDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ContractLastUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContractNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ContractDate {
            get {
                return this.ContractDateField;
            }
            set {
                if ((this.ContractDateField.Equals(value) != true)) {
                    this.ContractDateField = value;
                    this.RaisePropertyChanged("ContractDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ContractLastUpdate {
            get {
                return this.ContractLastUpdateField;
            }
            set {
                if ((this.ContractLastUpdateField.Equals(value) != true)) {
                    this.ContractLastUpdateField = value;
                    this.RaisePropertyChanged("ContractLastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContractNumber {
            get {
                return this.ContractNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ContractNumberField, value) != true)) {
                    this.ContractNumberField = value;
                    this.RaisePropertyChanged("ContractNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ContractsService.IContractsService")]
    public interface IContractsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/GetContracts", ReplyAction="http://tempuri.org/IContractsService/GetContractsResponse")]
        ContractsForm.ContractsService.Contract[] GetContracts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractsService/GetContracts", ReplyAction="http://tempuri.org/IContractsService/GetContractsResponse")]
        System.Threading.Tasks.Task<ContractsForm.ContractsService.Contract[]> GetContractsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractsServiceChannel : ContractsForm.ContractsService.IContractsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractsServiceClient : System.ServiceModel.ClientBase<ContractsForm.ContractsService.IContractsService>, ContractsForm.ContractsService.IContractsService {
        
        public ContractsServiceClient() {
        }
        
        public ContractsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContractsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ContractsForm.ContractsService.Contract[] GetContracts() {
            return base.Channel.GetContracts();
        }
        
        public System.Threading.Tasks.Task<ContractsForm.ContractsService.Contract[]> GetContractsAsync() {
            return base.Channel.GetContractsAsync();
        }
    }
}
